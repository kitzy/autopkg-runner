name: AutoPkg build (recipe list from recipe-overrides)

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 45

    steps:
      - name: Checkout runner repo
        uses: actions/checkout@v4

      - name: Checkout autopkg-overrides (read-only)
        uses: actions/checkout@v4
        with:
          repository: kitzy/autopkg-overrides
          ref: main
          path: recipe_overrides
          persist-credentials: false
          # If the repo is private and this job lacks access, add a token:
          # token: ${{ secrets.RECIPE_OVERRIDES_TOKEN }}

      - name: Debug paths
        run: |
          ls -la recipe_overrides/recipe-repos.txt || true
          ls -la recipe_overrides/recipe-lists || true
          ls -la recipe_overrides/overrides | sed -n '1,50p' || true
          test -f recipe_overrides/overrides/Firefox.pkg.recipe && echo "Found Firefox override"

      - name: Install AutoPkg (official pkg)
        run: |
          set -euo pipefail
          brew install jq
          URL="$(curl -fsSL https://api.github.com/repos/autopkg/autopkg/releases/latest \
                 | jq -r '.assets[] | select(.name | endswith(".pkg")) | .browser_download_url')"
          echo "AutoPkg pkg: $URL"
          curl -fsSL "$URL" -o /tmp/autopkg.pkg
          sudo installer -pkg /tmp/autopkg.pkg -target /
          autopkg version

      - name: Ensure autopkgserver is running
        run: |
          set -euo pipefail
          PLIST="/Library/LaunchDaemons/com.github.autopkg.autopkgserver.plist"
          LABEL="com.github.autopkg.autopkgserver"

          # If not present/loaded, try to load without failing the job on runner policy errors.
          if ! sudo launchctl print system/${LABEL} >/dev/null 2>&1; then
            sudo launchctl bootstrap system "$PLIST" 2>/dev/null || \
            sudo launchctl load -w "$PLIST" 2>/dev/null || true
          fi

          # Make sure it's enabled and started; don't die if these are no-ops.
          sudo launchctl enable system/${LABEL} || true
          sudo launchctl kickstart -k system/${LABEL} || true

          # Show current state (for logs), but don't fail if print is noisy.
          sudo launchctl print system/${LABEL} || true

      - name: Add recipe repos from overrides list (autopkg repo-add)
        env:
          AUTOPKG_CMD: autopkg
        run: |
          set -euo pipefail
          LIST="recipe_overrides/recipe-lists/recipe-repos.txt"
          [[ -f "$LIST" ]] || { echo "::error ::Repo list not found at $LIST"; exit 1; }

          # macOS bash 3.x: no mapfile — use a temp file + while-read loop
          STREAM="$(mktemp)"
          grep -Ev '^\s*(#|$)' "$LIST" > "$STREAM" || true
          if ! [[ -s "$STREAM" ]]; then
            echo "::warning ::Repo list is empty; continuing with whatever repos AutoPkg already has"
          fi

          while IFS= read -r url; do
            [[ -n "$url" ]] || continue
            echo "repo-add $url"
            $AUTOPKG_CMD repo-add "$url" || true
          done < "$STREAM"

          echo "Updating all repos…"
          $AUTOPKG_CMD repo-update all || true
          echo "Current repos:"
          $AUTOPKG_CMD repo-list || true

      - name: Build all recipes from darwin-prod.txt
        env:
          AUTOPKG_CMD: autopkg
        run: |
          set -euo pipefail
          mkdir -p out
          LIST="recipe_overrides/recipe-lists/darwin-prod.txt"
          [[ -f "$LIST" ]] || { echo "::error ::Recipe list not found at $LIST"; exit 1; }

          # macOS bash 3.x: no mapfile — use a temp file + while-read loop
          RECIPE_STREAM="$(mktemp)"
          grep -Ev '^\s*(#|$)' "$LIST" > "$RECIPE_STREAM" || true
          if ! [[ -s "$RECIPE_STREAM" ]]; then
            echo "::error ::No recipes in $LIST"; exit 1
          fi

          echo "Recipes to build:"
          sed 's/^/ - /' "$RECIPE_STREAM"

          successes=0; failures=0
          while IFS= read -r r; do
            # Prefer an override if present
            OVR="recipe_overrides/overrides/${r}.recipe"
            TARGET="$r"
            [[ -f "$OVR" ]] && TARGET="$OVR"

            echo "::group::Build $r (target: $TARGET)"
            if [[ "$TARGET" != "$r" ]]; then
              echo "Verifying trust for override"
              $AUTOPKG_CMD verify-trust-info "$TARGET"
            fi

            set +e
            $AUTOPKG_CMD run "$TARGET" --report-plist=report.plist -v
            rc=$?
            set -e
            if (( rc != 0 )); then
              echo "::error ::AutoPkg failed for $r (exit $rc)"
              failures=$((failures+1))
              echo "::endgroup::"
              continue
            fi

            PKG=$(/usr/libexec/PlistBuddy -c 'Print :results:packages:0:pathname' report.plist 2>/dev/null || true)
            if [[ -z "${PKG:-}" || ! -f "$PKG" ]]; then
              echo "::warning ::No pkg produced for $r; skipping artifact copy"
              failures=$((failures+1))
              echo "::endgroup::"
              continue
            fi

            echo "PKG=$PKG"
            cp "$PKG" out/
            successes=$((successes+1))
            echo "::endgroup::"
          done < "$RECIPE_STREAM"

          echo "Successes: $successes  Failures: $failures"
          (( successes > 0 )) || { echo "::error ::All builds failed or produced no pkg"; exit 70; }

      - name: Upload pkg artifacts
        uses: actions/upload-artifact@v4
        with:
          name: autopkg-pkgs
          path: out/*.pkg
          if-no-files-found: warn
          retention-days: 7

      - name: Job summary
        if: always()
        run: |
          echo "## AutoPkg build summary" >> "$GITHUB_STEP_SUMMARY"
          if ls out/*.pkg >/dev/null 2>&1; then
            for f in out/*.pkg; do
              echo "- $(basename "$f")" >> "$GITHUB_STEP_SUMMARY"
            done
          else
            echo "_No pkg artifacts saved._" >> "$GITHUB_STEP_SUMMARY"
          fi
