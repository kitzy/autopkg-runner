name: Autopkg run

on:
  watch:
    types: [started]
  # Commenting out the automated schedule so this AutoPKG build doesn't run on its own.
  # Keep this part in to run on a set schedule
  schedule: 
     - cron: 00 14 * * 1-5
  workflow_dispatch: # manually triggered
    inputs:
      recipe:
        description: Optional recipe to run (e.g. Google/GoogleChrome-test.jamf.recipe.yaml)
        required: false
      debug:
        description: Enable debug
        required: false
        default: 'False'
        type: choice
        options:
        - 'False'
        - 'True'
      pr_reviewer:
        description: Optional GitHub username to request PR review from
        required: false

jobs:
  AutoPkg:
    runs-on: macos-latest
    timeout-minutes: 90 # Keeps your builds from running too long
    env:
      AUTOPKG_SHA256: "304f51506103b5daae44a977df9f53c0ee43f164813690b674b1d1437c833b03"
      AUTOPKG_URL: "https://github.com/autopkg/autopkg/releases/download/v2.7.6/autopkg-2.7.6.pkg"
      GITHUB_TOKEN: ${{ secrets.AUTOPKG_RUNNER_GITHUB_TOKEN }}
      FLEET_GITOPS_GITHUB_TOKEN: ${{ secrets.FLEET_GITOPS_GITHUB_TOKEN }}
    steps:
    - name: Checkout AutoPkg recipes
      uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 #v3.5.3 Pin SHA1 hash instead of version
      with:
        token: ${{ env.GITHUB_TOKEN }}
        fetch-depth: 1
    - name: Setup Python
      uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 #v4.7.0
      with:
        python-version: 3.11

    - name: Install Python dependencies #(remove pyyaml line if you don't use yaml recipes)
      run: |
        pip3 install --upgrade pip
        pip3 install -r requirements.txt
        pip3 install pyyaml

    - name: Install AutoPkg
      run: |
        curl -L ${{ env.AUTOPKG_URL }} --output /tmp/autopkg.pkg
        echo "${{ env.AUTOPKG_SHA256 }} */tmp/autopkg.pkg" | shasum -c
        if [[ $? != "0" ]]; then exit 1; fi
        sudo installer -pkg /tmp/autopkg.pkg -target /

    - name: Install certifi and set CA bundle
      run: |
        python -m pip install --upgrade certifi
        SSL_CERT_FILE=$(python -m certifi)
        echo "SSL_CERT_FILE=$SSL_CERT_FILE" >> "$GITHUB_ENV"
        echo "REQUESTS_CA_BUNDLE=$SSL_CERT_FILE" >> "$GITHUB_ENV"

    - name: Verify HTTPS connectivity
      run: |
        python - <<'PY'
        import ssl, urllib.request
        ctx = ssl.create_default_context(cafile=ssl.get_default_verify_paths().openssl_cafile)
        try:
            urllib.request.urlopen("https://fleet.kitzy.net", context=ctx)
        except Exception as e:
            print(f"HTTPS connectivity test failed: {e}")
            raise
        else:
            print("HTTPS connectivity verified")
        PY

    - name: Configure AutoPkg and Git
      run: |
        defaults write com.github.autopkg RECIPE_OVERRIDE_DIRS "$(pwd)"/overrides/
        defaults write com.github.autopkg AUTOPKG_PROCESSOR_SEARCH_DIRS "$(pwd)"/fleet-gitops-uploader/
        defaults write com.github.autopkg FAIL_RECIPES_WITHOUT_TRUST_INFO -bool YES
        defaults write com.github.autopkg GITHUB_TOKEN "${{ secrets.GITHUB_TOKEN }}"
        defaults write com.github.autopkg FLEET_GITOPS_GITHUB_TOKEN "${{ secrets.FLEET_GITOPS_GITHUB_TOKEN }}"
        defaults write com.github.autopkg FLEET_API_TOKEN "${{ secrets.FLEET_API_TOKEN }}"
        git config --global user.name "runner"
        git config --global user.email "runner@githubactions.local"

    - name: Add AutoPkg repos
      run: |
        for repo in $(cat repo_list.txt); do autopkg repo-add "$repo"; done

    - name: Run AutoPkg
      run: |
        python3 autopkg_tools.py -l recipe_list.json
        if [ -f pull_request_title ]; then
        echo "TITLE=$(cat pull_request_title)" >> $GITHUB_ENV
        echo "BODY<<EOF" >> $GITHUB_ENV
        cat pull_request_body >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        fi
      env:
        RECIPE: ${{ github.event.inputs.recipe }}
        SLACK_WEBHOOK_URL: None

    - name: Create Trust Info pull request
      if: env.TITLE
      id: create_pr
      run: |
        export BRANCH_NAME=trust-info-`date +'%Y-%m-%d'`
        git checkout -b $BRANCH_NAME
        git add overrides/
        git commit -m "$TITLE"
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        git push --set-upstream origin $BRANCH_NAME
        PR_RESPONSE=$(jq -n --arg title "$TITLE" \
              --arg body "$BODY" \
              --arg head "$BRANCH_NAME" \
           '{title: $title, body: $body, head: $head, "base": "${{ github.ref_name }}"}' | curl -s --request POST \
           --url https://api.github.com/repos/${{ github.repository }}/pulls \
           --header "authorization: Bearer $GITHUB_TOKEN" \
           --header 'content-type: application/json' \
           -d@-)
        PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.number')
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

    - name: Request PR review if reviewer set
      if: ${{ github.event.inputs.pr_reviewer != '' && steps.create_pr.outputs.pr_number != '' }}
      run: |
        curl -s -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.create_pr.outputs.pr_number }}/requested_reviewers \
          -d '{"reviewers":["${{ github.event.inputs.pr_reviewer }}"]}'
