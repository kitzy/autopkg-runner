---
name: 'AutoPkg → Fleet → PR'

'on':
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-publish:
    runs-on: macos-latest
    env:
      AUTOPKG_CMD: python autopkg/Code/autopkg
    steps:
      - name: Checkout runner
        uses: actions/checkout@v4

      - name: Checkout overrides (read-only)
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.OVERRIDES_REPO }}
          ref: ${{ secrets.OVERRIDES_REF }}
          path: overrides
          persist-credentials: false
      - name: Setup AutoPkg
        uses: autopkg/setup-autopkg-actions@v0.1.2

      - name: Install jq
        run: brew install jq

      - name: Check AutoPkg version
        run: $AUTOPKG_CMD version

      - name: Add upstream recipe repos
        run: |
          set -euo pipefail
          $AUTOPKG_CMD repo-add https://github.com/autopkg/recipes || true
          $AUTOPKG_CMD repo-add https://github.com/homebysix/recipes || true
          $AUTOPKG_CMD repo-list

      - name: Verify trust for recipes in overrides list
        run: |
          set -euo pipefail
          RECIPES=()
          while IFS= read -r line; do
            RECIPES+=("$line")
          done < <(grep -Ev '^\s*(#|$)' overrides/recipe-lists/darwin-prod.txt || true)
          if (( ${#RECIPES[@]} == 0 )); then
            echo "No recipes found in overrides/recipe-lists/darwin-prod.txt"
            exit 1
          fi
          for r in "${RECIPES[@]}"; do
            OVR="overrides/overrides/${r}.recipe"
            if [[ -f "$OVR" ]]; then
              echo "Verifying trust: $OVR"
              $AUTOPKG_CMD verify-trust-info "$OVR"
            else
              echo "No override for ${r} at $OVR — skipping trust verification \
                for this item."
            fi
          done

      - name: Run AutoPkg + upload to Fleet
        env:
          FLEET_URL: ${{ secrets.FLEET_URL }}
          FLEET_API_TOKEN: ${{ secrets.FLEET_API_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p out
          mapfile -t RECIPES < <(
            grep -Ev '^\s*(#|$)' overrides/recipe-lists/darwin-prod.txt || true
          )
          if (( ${#RECIPES[@]} == 0 )); then
            echo "No recipes found in overrides/recipe-lists/darwin-prod.txt"
            exit 1
          fi
          for r in "${RECIPES[@]}"; do
            OVR="overrides/overrides/${r}.recipe"
            TARGET="$r"
            if [[ -f "$OVR" ]]; then TARGET="$OVR"; fi
            echo "Running AutoPkg target: $TARGET"
            $AUTOPKG_CMD run "$TARGET" --report-plist=report.plist -v
            PKG=$( \
              /usr/libexec/PlistBuddy \
                -c 'Print :results:packages:0:pathname' report.plist
            )
            echo "PKG=$PKG"
            curl -sS -X POST "$FLEET_URL/api/v1/fleet/software/package" \
              -H "Authorization: Bearer $FLEET_API_TOKEN" \
              -H "kbn-xsrf: true" \
              -F team_id=0 \
              -F self_service=true \
              -F "software=@${PKG};type=application/octet-stream" \
            | tee "out/${r%.pkg}.json"
          done
      - name: Clone GitOps repo
        env:
          GITOPS_REPO: ${{ secrets.GITOPS_REPO }}
          GITOPS_PUSH_TOKEN: ${{ secrets.GITOPS_PUSH_TOKEN }}
        run: |
          git clone "https://$GITOPS_PUSH_TOKEN@github.com/$GITOPS_REPO.git" \
            gitops
          cd gitops
          git config user.name "autopkg-bot"
          git config user.email "autopkg-bot@users.noreply.github.com"
          git checkout "${{ secrets.GITOPS_DEFAULT_BRANCH }}"

      - name: Update GitOps and open PRs
        env:
          GITOPS_REPO: ${{ secrets.GITOPS_REPO }}
          GITOPS_DEFAULT_BRANCH: ${{ secrets.GITOPS_DEFAULT_BRANCH }}
          GITOPS_PUSH_TOKEN: ${{ secrets.GITOPS_PUSH_TOKEN }}
        run: |
          set -e
          touch pr_urls.txt
          for json in out/*.json; do
            slug=$(basename "$json" .json)
            name=$(jq -r '.name' "$json")
            version=$(jq -r '.version' "$json")
            branch="autopkg/${slug}/v${version}"
            cd gitops
            git checkout "$GITOPS_DEFAULT_BRANCH"
            git pull --ff-only
            git checkout -b "$branch"
            python ../scripts/update_gitops.py \
              --gitops-dir . \
              --json "../$json" \
              --teams workstations,workstations-canary
            git add .
            git commit -m "autopkg: update $name to $version"
            git push -u origin "$branch"
            data=$(jq -n \
              --arg title "autopkg: $name $version" \
              --arg head "$branch" \
              --arg base "$GITOPS_DEFAULT_BRANCH" \
              '{title: $title, head: $head, base: $base}'
            )
            pr=$( \
              curl -s -X POST \
                -H "Authorization: token $GITOPS_PUSH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/repos/$GITOPS_REPO/pulls \
                -d "$data"
            )
            pr_url=$(echo "$pr" | jq -r '.html_url')
            pr_id=$(echo "$pr" | jq -r '.node_id')
            query='mutation{enablePullRequestAutoMerge('\
              '  input:{pullRequestId:"'"$pr_id"'",'\
              '  mergeMethod:SQUASH}){clientMutationId}}'
            payload=$(jq -n --arg q "$query" '{query: $q}')
            curl -s -X POST \
              -H "Authorization: token $GITOPS_PUSH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/graphql \
              -d "$payload"
            echo "$pr_url" >> ../pr_urls.txt
            cd ..
          done

      - name: PR Summary
        run: |
          echo '## Pull Requests' >> $GITHUB_STEP_SUMMARY
          cat pr_urls.txt >> $GITHUB_STEP_SUMMARY
